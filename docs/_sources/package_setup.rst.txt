=========================
Project Setup
=========================

    :Author: Bas Chatel

.. contents::



1 Setup of the project
----------------------

.. note::

    This part is not about the project but about how the documentation workflow is set up. I intend to keep this up-to-date as a reminder and basically just add it to every project that I set up in this way.

1.1 `pyment <https://github.com/dadadel/pyment>`_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So in terms of writing documentation, I think everybody can agree that it just takes a lot of work to do correctly. That is why there is a neat little python package called `pyment <https://github.com/dadadel/pyment>`_ which can auto-document functions and even rewrite documentation from one style to another.

For example, when I'm programming, I tend to work a bit messy, using different documenting styles or forgetting to document a function etc. This leads to, even though still readable(!), somewhat messy code. By calling pyment as follows:

.. code:: bash

    pyment -o numpydoc -w .

Pyment overwrites all documentation (because of the ``-w`` flag), and creates new docstrings where they weren't in the current folder (because of the dot at the end). It even does this recursively! So folders within folders will also be changed. You can choose an output style by using the ``-o`` flag. I really like the `numpy documenting style <https://numpydoc.readthedocs.io/en/latest/format.html>`_, so therefore I choose to use the ``numpydoc`` option.

1.2 `sphinx <https://www.sphinx-doc.org/en/master/>`_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sphinx is where the magic happens regarding the documentation (what you're reading now). It autogenerates a static website from your documentation, with some possibility to extend. There are a few steps that are useful to know when to start with this:

1.2.1 Installation
^^^^^^^^^^^^^^^^^^

First of all, the installation process is quite easy:

.. code:: bash

    pip install sphinx

Then you make your package directory and create a ``docs`` folder in it, and a ``sphinx`` folder. Note that the name of the ``sphinx`` folder doesn't matter, but the name ``docs`` is needed to host it on GitHub pages later. So you go to the root of your project and basically put in the following:

.. code:: bash

    mkdir sphinx
    mkdir docs
    cd sphinx/
    sphinx-quickstart

The ``sphinx-quickstart`` command will ask some questions seen below. The defaults are fine, but I would suggest answering ``yes`` on the first question to separate source and build. This is so that there is a clear distinction between what **you're** writing (source) and what is automatically generated by sphinx (build).

.. code:: bash

    Welcome to the Sphinx 3.5.4 quickstart utility.

    Please enter values for the following settings (just press Enter to
    accept a default value if one is given in brackets).

    Selected root path: .

    You have two options for placing the build directory for Sphinx output.
    Either, you use a directory "_build" within the root path, or you separate
    "source" and "build" directories within the root path.
    > Separate source and build directories (y/n) [n]: y

    The project name will occur in several places in the built documentation.
    > Project name: MyProject
    > Author name(s): Bas Chatel
    > Project release []: 0.0.1

    If the documents are to be written in a language other than English,
    you can select a language here by its language code. Sphinx will then
    translate text that it generates into that language.

    For a list of supported codes, see
    https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language.
    > Project language [en]: en

    Creating file /Users/chatel/github/researchhelper/sphinx/source/conf.py.
    Creating file /Users/chatel/github/researchhelper/sphinx/source/index.rst.
    Creating file /Users/chatel/github/researchhelper/sphinx/Makefile.
    Creating file /Users/chatel/github/researchhelper/sphinx/make.bat.

    Finished: An initial directory structure has been created.

    You should now populate your master file /Users/chatel/github/lonelinessABM/source/index.rst and create other documentation
    source files. Use the Makefile to build the docs, like so:
       make builder
    where "builder" is one of the supported builders, e.g. html, latex or linkcheck.

You see that the quickstart made some files for me automatically. make.bat is quite important here together with the Makefile. These files allow you the commands (among others) ``make clean`` and ``make html``. The first command cleans out the entire build folder, so we can start fresh and recreate everything. And ``make html`` generated the whole website.

``index.rst`` is responsible for the first visible page and provides a table of contents that will cause the site to be populated. ``conf.py`` is for sphinx configuration. I suggest changing these lines so that sphinx recognizes NumPy documentation style and provides auto-documentation of your code.

.. code:: python

    extensions = [
        "sphinx.ext.autodoc",
        "sphinx.ext.napoleon",
    ]

.. note::

    You do have to download these extensions yourself through pip install first!

For a more extensive explanation of how to go about setting things up, I would recommend `this blogpost <https://samnicholls.net/2016/06/15/how-to-sphinx-readthedocs/>`_. I think the most important part is the auto-doc feature which can be called through the following command from the root directory:

.. code:: bash

    sphinx-apidoc -f -o sphinx/source researchhelper

Where researchhelper is the name of the package. Meaning that all actual python code is in that folder.

1.3 `Org-mode <https://orgmode.org/>`_ and `emacs <https://www.gnu.org/software/emacs/>`_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I use emacs, and I love everything that has to do with org-mode. It's kind of like a markup language like `markdown <https://www.markdownguide.org/>`_ of `reStructuredText <https://www.writethedocs.org/guide/writing/reStructuredText/>`_ (rst), but then on steroids. My only issue is that sphinx uses .rst files to populate its documentation. But, naturally, the amazing emacs community has an answer for that!

By using the `ox-rst package <https://github.com/msnoigrs/ox-rst>`_, we can simply export .org files into the .rst format. That way, I can write things just like I like it while still being compliant with the formatting that sphinx requires.

1.4 `poetry <https://python-poetry.org/>`_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`Python poetry <https://python-poetry.org/>`_ is a package that aims to make python package and dependency management easy, and they succeed in that aim! By using Poetry, it's super easy to make your self-made python module available for a simple pip install. So if you're interested in this, definitely check it out!

1.5 Github pages
~~~~~~~~~~~~~~~~

Separating source from build in the sphinx setup also allows us to copy the build files to the docs folder more easily. This is important because GitHub pages want a given folder as the website root. And the only two choices at the moment are ``/`` (the root) or the ``/docs`` folder. I just copy the entire HTML folder inside the build folder to ``docs``. I've made a tiny and super easy shortcut for that in my ``~/.zshrc`` file (or you can put it in your ``~/.bashrc`` file.

.. code:: bash

    function sphinxPush() {
        cp -r ./build/html/* ../docs
    }
